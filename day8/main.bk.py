from pathlib import Pathfrom collections import Counterimport numpy as npfrom ortools.sat.python import cp_modelTEST_INPUT = """be cfbegad cbdgef fgaecd cgeb fdcge agebfd fecdb fabcd edb | fdgacbe cefdb cefbgd gcbeedbfga begcd cbg gc gcadebf fbgde acbgfd abcde gfcbed gfec | fcgedb cgb dgebacf gcfgaebd cg bdaec gdafb agbcfd gdcbef bgcad gfac gcb cdgabef | cg cg fdcagb cbgfbegcd cbd adcefb dageb afcb bc aefdc ecdab fgdeca fcdbega | efabcd cedba gadfec cbaecbfdg fbg gf bafeg dbefa fcge gcbea fcaegb dgceab fcbdga | gecf egdcabf bgf bfgeafgeab ca afcebg bdacfeg cfaedg gcfdb baec bfadeg bafgc acf | gebdcfa ecba ca fadegcbdbcfg fgd bdegcaf fgec aegbdf ecdfab fbedc dacgb gdcebf gf | cefg dcbef fcge gbcadfebdfegc cbegaf gecbf dfcage bdacg ed bedf ced adcbefg gebcd | ed bcgafe cdgba cbgefegadfb cdbfeg cegd fecab cgb gbdefca cg fgcdab egfdb bfceg | gbdfcae bgc cg cgbgcafb gcf dcaebfg ecagb gf abcdeg gaef cafbge fdbac fegbdc | fgae cfgab fg bagce"""TEST_ANSWER = 26# Length of signal -> numberLEN_LOOKUP = {    2: 1,    3: 7,    4: 4,    7: 8}def run(lines):    total = 0    for line in lines:        _, targets = line.split(" | ")        targets = targets.split(" ")        for target in targets:            if len(target) in LEN_LOOKUP:                total += 1    return totaldef mock(lines):    return run(lines)def parse_data(data):    return data.strip().splitlines()if __name__ == "__main__":    mock_answer = mock(parse_data(TEST_INPUT))    print(f"[TEST] Expected answer: {TEST_ANSWER}")    print(f"[TEST] Actual answer: {mock_answer}")    print(f"[TEST] {'PASSED' if mock_answer == TEST_ANSWER else 'FAILED'}")    answer = run(parse_data(Path("input.txt").read_text()))    print(f"[RUN] answer: {answer}")